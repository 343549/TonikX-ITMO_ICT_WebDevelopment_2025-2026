{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"LR1/","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161","text":""},{"location":"LR1/#_1","title":"\u0421\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0430 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b","text":"<ol> <li> <p>UDP \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440</p> </li> <li> <p><code>task1/client.py</code> \u2014 \u043a\u043b\u0438\u0435\u043d\u0442, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u043e\u0442\u0432\u0435\u0442.</p> </li> <li> <p><code>task1/server.py</code> \u2014 \u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u044f \u043e\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043e\u0442\u0432\u0435\u0442.</p> </li> <li> <p>TCP \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f</p> </li> <li> <p><code>task2/client.py</code> \u2014 \u043a\u043b\u0438\u0435\u043d\u0442, \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0438 \u043f\u043e\u043b\u0443\u0447\u0430\u044e\u0449\u0438\u0439 \u0440\u0435\u0448\u0435\u043d\u0438\u0435.</p> </li> <li> <p><code>task2/server.py</code> \u2014 \u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0449\u0438\u0439 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b, \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u044e\u0449\u0438\u0439 \u043a\u043e\u0440\u043d\u0438 \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u044e\u0449\u0438\u0439 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</p> </li> <li> <p>HTTP \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u043e\u0442\u0434\u0430\u0447\u0435\u0439 HTML</p> </li> <li> <p><code>task3/server.py</code> \u2014 \u043f\u0440\u043e\u0441\u0442\u043e\u0439 HTTP \u0441\u0435\u0440\u0432\u0435\u0440, \u043e\u0442\u0434\u0430\u044e\u0449\u0438\u0439 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 <code>index.html</code>.</p> </li> <li> <p><code>task3/index.html</code> \u2014 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0434\u043b\u044f \u0442\u0435\u0441\u0442\u0430.</p> </li> <li> <p>\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 TCP</p> </li> <li> <p><code>task4/client.py</code> \u2014 \u043a\u043b\u0438\u0435\u043d\u0442 \u0434\u043b\u044f \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f \u043a \u0447\u0430\u0442\u0443.</p> </li> <li> <p><code>task4/server.py</code> \u2014 \u0441\u0435\u0440\u0432\u0435\u0440, \u043f\u043e\u0434\u0434\u0435\u0440\u0436\u0438\u0432\u0430\u044e\u0449\u0438\u0439 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0440\u0430\u0441\u0441\u044b\u043b\u043a\u043e\u0439 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439.</p> </li> <li> <p>\u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 HTTP \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 POST</p> </li> <li> <p><code>task5/server.py</code> \u2014 \u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u043e\u0446\u0435\u043d\u043e\u043a \u0447\u0435\u0440\u0435\u0437 \u0432\u0435\u0431-\u0444\u043e\u0440\u043c\u0443.</p> </li> </ol>"},{"location":"LR1/#1-udp-","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 \u2014 UDP \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043f\u0440\u0438\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0435, \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0435\u0433\u043e \u0438 \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442.</p> <p>\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (<code>task1/client.py</code>):</p> <pre><code>import socket\n\nSERVER_HOST = \"127.0.0.1\"\nSERVER_PORT = 12400\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nmessage = f\"Hello, Server! \"\nclient_socket.sendto(message.encode(), (SERVER_HOST, SERVER_PORT))\nprint(\"\u041e\u0442\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u043e \u0441\u0435\u0440\u0432\u0435\u0440\u0443: \", message)\n\ndata, addr = client_socket.recvfrom(1024)\nprint(\"\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: \", data.decode())\nclient_socket.close()\n</code></pre> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (<code>task1/server.py</code>):</p> <pre><code>import socket\n\nHost = \"127.0.0.1\"\nPort = 12400\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_socket.bind((Host, Port))\nprint(f\"UDP-\u0441\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {Host}:{Port}\")\n\nwhile True:\n    data, addr = server_socket.recvfrom(1024)\n    message = data.decode()\n    print(\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u043e \u043e\u0442\", addr, \":\", message)\n    reply = \"Hello client! \"\n    server_socket.sendto(reply.encode(), addr)\n</code></pre>"},{"location":"LR1/#2-tcp-","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 \u2014 TCP \u043a\u043b\u0438\u0435\u043d\u0442-\u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u0440\u0435\u0448\u0435\u043d\u0438\u0435\u043c \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b <code>a, b, c</code>, \u0441\u0435\u0440\u0432\u0435\u0440 \u0432\u044b\u0447\u0438\u0441\u043b\u044f\u0435\u0442 \u043a\u043e\u0440\u043d\u0438 \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f <code>ax^2 + bx + c = 0</code> \u0438 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.</p> <p>\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (<code>task2/client.py</code>):</p> <pre><code>import socket\n\nSERVER_HOST = \"127.0.0.1\"\nSERVER_PORT = 12345\n\nclient_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient_socket.connect((SERVER_HOST, SERVER_PORT))\n\nprint(\"\u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f ax^2 + bx + c = 0\")\na = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 a: \"))\nb = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 b: \"))\nc = float(input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442 c: \"))\n\nreq = str(a) + \",\" + str(b) + \",\" + str(c)\nclient_socket.send(req.encode())\n\nresult = client_socket.recv(1024).decode()\nprint(\"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442: \", result)\nclient_socket.close()\n</code></pre> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (<code>task2/server.py</code>):</p> <pre><code>import socket\n\nSERVER_HOST = \"127.0.0.1\"\nSERVER_PORT = 12345\n\nserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver_socket.bind((SERVER_HOST, SERVER_PORT))\nserver_socket.listen(1)\nprint(f\"TCP \u0441\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u043d\u0430 {SERVER_HOST}:{SERVER_PORT}\")\n\nwhile True:\n    client_socket, client_addr = server_socket.accept()\n    print(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u043a\u043b\u0438\u0435\u043d\u0442: {client_addr}\")\n    try:\n        print(\"\u041d\u0430\u0447\u0438\u043d\u0430\u0435\u043c \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0443 \u0434\u0430\u043d\u043d\u044b\u0445...\")\n        req = client_socket.recv(1024).decode()\n        operands = req.split(\",\")\n        a, b, c = float(operands[0]), float(operands[1]), float(operands[2])\n        print(f\"\u041f\u043e\u043b\u0443\u0447\u0435\u043d\u044b \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u044b: a = {a}, b = {b}, c = {c}\")\n    except ValueError:\n        result = \"\u041e\u0448\u0438\u0431\u043a\u0430: \u043d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0432\u0432\u043e\u0434 \u043a\u043e\u044d\u0444\u0444\u0438\u0446\u0438\u0435\u043d\u0442\u043e\u0432.\"\n        client_socket.send(result.encode())\n        client_socket.close()\n        continue\n\n    discriminant = b**2 - 4 * a * c\n    print(f\"\u0414\u0438\u0441\u043a\u0440\u0438\u043c\u0438\u043d\u0430\u043d\u0442: {discriminant}\")\n    if discriminant &gt; 0:\n        root1 = (-b + discriminant**0.5) / (2 * a)\n        root2 = (-b - discriminant**0.5) / (2 * a)\n        result = f\"\u0414\u0432\u0430 \u043a\u043e\u0440\u043d\u044f: x1 = {root1}, x2 = {root2}\"\n    elif discriminant == 0:\n        root = -b / (2 * a)\n        result = f\"\u041e\u0434\u0438\u043d \u043a\u043e\u0440\u0435\u043d\u044c: x = {root}\"\n    else:\n        result = \"\u041d\u0435\u0442 \u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u043a\u043e\u0440\u043d\u0435\u0439.\"\n\n    client_socket.send(result.encode())\n    client_socket.close()\n</code></pre>"},{"location":"LR1/#3-http-html","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 \u2014 HTTP \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u043e\u0442\u0434\u0430\u0447\u0435\u0439 HTML","text":"<p>\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u0434\u0430\u0435\u0442 \u0441\u0442\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0443\u044e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 <code>index.html</code>.</p> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (<code>task3/server.py</code>):</p> <pre><code>import socket\n\ndef handle_client(client_socket):\n    request = client_socket.recv(1024).decode('utf-8')\n    print(f\"Request received:\\n{request}\")\n\n    with open(r\"C:\\Users\\Lenovo\\Desktop\\ITMO_2025\\Web_Programming\\First_lab\\Thrid_task\\index.html\", 'r') as file:\n        content = file.read()\n\n    response = f\"\"\"HTTP/1.1 200 OK Content-Type: text/html {content}\"\"\"\n    client_socket.sendall(response.encode('utf-8'))\n    client_socket.close()\n\ndef start_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('localhost', 8080))\n    server_socket.listen(1)\n    print(\"Server is listening on port 8080...\")\n    while True:\n        client_socket, client_address = server_socket.accept()\n        print(f\"Connection from {client_address}\")\n        handle_client(client_socket)\n\nstart_server()\n</code></pre> <p>HTML (<code>task3/index.html</code>):</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;My Simple Server&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Hello from Python socket server!&lt;/h1&gt;\n    &lt;p&gt;This page is served by sockets, not Flask or Django.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"LR1/#4-tcp","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u2014 \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u043d\u0430 TCP","text":"<p>\u041a\u043e\u0434 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 (<code>task4/client.py</code>):</p> <pre><code>import socket\nimport threading\n\ndef receive_messages(client_socket):\n    while True:\n        try:\n            message = client_socket.recv(1024).decode('utf-8')\n            if message: print(message)\n        except: break\n\ndef send_messages(client_socket):\n    while True:\n        try:\n            message = input()\n            if message.lower() == \"exit\":\n                print(\"Disconnecting from server...\")\n                client_socket.close()\n                break\n            client_socket.send(message.encode('utf-8'))\n        except: break\n\ndef start_client():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect(('localhost', 5555))\n    print(\"Connected to server. Type messages and press Enter. Type 'exit' to quit.\")\n    threading.Thread(target=receive_messages, args=(client_socket,), daemon=True).start()\n    threading.Thread(target=send_messages, args=(client_socket,), daemon=True).start()\n    while True:\n        try:\n            if client_socket.fileno() == -1: break\n        except: break\n\nstart_client()\n</code></pre> <p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (<code>task4/server.py</code>):</p> <pre><code>import socket\nimport threading\n\nclients = []\nclient_names = {}\nclient_count = 0\nrunning = True\n\ndef broadcast(message, sender_socket=None):\n    for client in clients:\n        if client != sender_socket:\n            try:\n                client.send(message.encode('utf-8'))\n            except: continue\n\ndef handle_client(client_socket):\n    name = client_names[client_socket]\n    client_socket.settimeout(1.0)\n    while running:\n        try:\n            message = client_socket.recv(1024).decode('utf-8')\n            if message:\n                full_message = f\"{name}: {message}\"\n                print(full_message)\n                broadcast(full_message, sender_socket=client_socket)\n            else: break\n        except socket.timeout: continue\n        except: break\n    if client_socket in clients: clients.remove(client_socket)\n    if client_socket in client_names: del client_names[client_socket]\n    client_socket.close()\n    broadcast(f\"{name} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\")\n    print(f\"{name} \u043f\u043e\u043a\u0438\u043d\u0443\u043b \u0447\u0430\u0442.\")\n\ndef start_server():\n    global client_count, running\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('localhost', 5555))\n    server_socket.listen(5)\n    server_socket.settimeout(1.0)\n    print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d \u0438 \u0441\u043b\u0443\u0448\u0430\u0435\u0442 \u043f\u043e\u0440\u0442 5555...\")\n    try:\n        while running:\n            try:\n                client_socket, client_address = server_socket.accept()\n            except socket.timeout: continue\n            client_count += 1\n            client_name = f\"Client{client_count}\"\n            client_names[client_socket] = client_name\n            clients.append(client_socket)\n            print(f\"{client_name} \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f \u0441 \u0430\u0434\u0440\u0435\u0441\u0430 {client_address}\")\n            threading.Thread(target=handle_client, args=(client_socket,), daemon=True).start()\n    except KeyboardInterrupt:\n        running = False\n        for client in clients: client.close()\n        server_socket.close()\n        print(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0441\u0442\u0430\u043d\u043e\u0432\u043b\u0435\u043d.\")\n\nif __name__ == \"__main__\":\n    start_server()\n</code></pre>"},{"location":"LR1/#5-http-post","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 \u2014 \u041c\u0438\u043d\u0438\u043c\u0430\u043b\u044c\u043d\u044b\u0439 HTTP \u0441\u0435\u0440\u0432\u0435\u0440 \u0441 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 POST","text":"<p>\u041a\u043e\u0434 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 (<code>task5/server.py</code>):</p> <pre><code>import socket\nimport threading\nimport urllib.parse\n\ngrades = {}\n\ndef generate_html():\n    html = \"\"\"&lt;html&gt;&lt;head&gt;&lt;title&gt;Grades&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\n&lt;h1&gt;Grades List&lt;/h1&gt;&lt;table border=\"1\"&gt;&lt;tr&gt;&lt;th&gt;Subject&lt;/th&gt;&lt;th&gt;Grades&lt;/th&gt;&lt;/tr&gt;\"\"\"\n    for subject, grade_list in grades.items():\n        grades_str = \", \".join(grade_list)\n        html += f\"&lt;tr&gt;&lt;td&gt;{subject}&lt;/td&gt;&lt;td&gt;{grades_str}&lt;/td&gt;&lt;/tr&gt;\"\n    html += \"\"\"&lt;/table&gt;&lt;br&gt;\n&lt;form method=\"POST\" action=\"/\"&gt;\n&lt;input type=\"text\" name=\"subject\" placeholder=\"Subject\" required&gt;&lt;br&gt;\n&lt;input type=\"text\" name=\"grade\" placeholder=\"Grade\" required&gt;&lt;br&gt;\n&lt;input type=\"submit\" value=\"Add Grade\"&gt;&lt;/form&gt;&lt;/body&gt;&lt;/html&gt;\"\"\"\n    return html\n\ndef handle_request(client_socket):\n    request = client_socket.recv(1024).decode('utf-8')\n    print(f\"Received request:\\n{request}\")\n    if not request: client_socket.close(); return\n    lines = request.split(\"\\r\\n\")\n    method, path, _ = lines[0].split()\n    if method == \"POST\":\n        body = request.split(\"\\r\\n\\r\\n\", 1)[1]\n        params = urllib.parse.parse_qs(body)\n        subject = params.get(\"subject\", [\"\"])[0].strip()\n        grade = params.get(\"grade\", [\"\"])[0].strip()\n        if subject and grade:\n            grades.setdefault(subject, []).append(grade)\n    html_content = generate_html()\n    response = \"HTTP/1.1 200 OK\\r\\nContent-Type: text/html\\r\\n\\r\\n\" + html_content\n    client_socket.sendall(response.encode(\"utf-8\"))\n    client_socket.close()\n\ndef start_server(host=\"localhost\", port=8080):\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind((host, port))\n    server_socket.listen(5)\n    print(f\"Server started at http://{host}:{port}\")\n    while True:\n        client_socket, client_address = server_socket.accept()\n        print(f\"Connection from {client_address}\")\n        threading.Thread(target=handle_request, args=(client_socket,)).start()\n\nif __name__ == \"__main__\":\n    start_server()\n</code></pre>"},{"location":"LR1/#_2","title":"\u0412\u044b\u0432\u043e\u0434\u044b","text":"<ul> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u0442\u0438\u043f\u044b \u0441\u0435\u0442\u0435\u0432\u044b\u0445 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0439: UDP, TCP, HTTP.</li> <li>\u041f\u043e\u043b\u0443\u0447\u0435\u043d \u043e\u043f\u044b\u0442 \u0440\u0430\u0431\u043e\u0442\u044b \u0441 \u0441\u043e\u043a\u0435\u0442\u0430\u043c\u0438, \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u0442\u043e\u0447\u043d\u043e\u0441\u0442\u044c\u044e \u0438 \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u043e\u0439 HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432.</li> <li>\u0412\u0441\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0438\u0440\u043e\u0432\u0430\u043d\u044b \u043f\u043e \u043f\u0430\u043f\u043a\u0430\u043c \u0438 \u0441\u043d\u0430\u0431\u0436\u0435\u043d\u044b \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f\u043c\u0438.</li> </ul>"}]}